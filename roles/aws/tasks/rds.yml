- name: create rds
  when: aws_rds_force_creation is defined or (aws_rds_endpoint is not defined and aws_rds_dbs is defined)
  block:
  - name: check rds
    rds_instance_facts:
      aws_access_key: "{{ aws_access_key  | default(omit) }}"
      aws_secret_key: "{{ aws_secret_key  | default(omit) }}"
      region: "{{ aws_region | default(omit) }}"
      db_instance_identifier: "{{ aws_rds_db_name }}"
    register: aws_rds_instance_facts

  - when: aws_rds_instance_facts.instances | length
    set_fact:
      aws_rds_endpoint: "{{ aws_rds_instance_facts.instances | map(attribute='endpoint.address') | first }}"

  - name: get subnets ids
    when: vpc_subnet_ids is not defined
    block:
    - name: Subnets facts
      when: aws_subnets is defined
      ec2_vpc_subnet_facts:
        aws_access_key: "{{ aws_access_key  | default(omit) }}"
        aws_secret_key: "{{ aws_secret_key  | default(omit) }}"
        region: "{{ aws_vpc_nets | map(attribute='region') | first | default(aws_region) }}"
      register: ec2_subnets_facts

    - name: Save subnets ids
      with_items: "{{ ec2_subnets_facts.subnets }}"
      when: item.tags.Name is defined
      set_fact:
        ec2_vpc_subnet_ids: "{{ ec2_vpc_subnet_ids | default({}) | combine( { item.tags.Name: item.id } ) }}"
      no_log: true

    - set_fact:
        vpc_subnet_ids: "{{ ec2_vpc_subnet_ids }}"
      no_log: true

  - with_items: "{{ aws_rds_subnets }}"
    set_fact:
      rds_group_subnet_ids: "{{ rds_group_subnet_ids | default([]) + [vpc_subnet_ids[item]] }}"
    no_log: true

  - name: VPC security groups facts
    when: aws_rds_vpc_security_group_name is defined
    ec2_group_facts:
      aws_access_key: "{{ aws_access_key  | default(omit) }}"
      aws_secret_key: "{{ aws_secret_key  | default(omit) }}"
      region: "{{ aws_vpc_nets | map(attribute='region') | first | default(aws_region) }}"
      filters:
        "group_name": "{{ aws_rds_vpc_security_group_name }}"
    register: ec2_group_db_facts

  - when: ec2_group_db_facts is defined
    set_fact:
      ec2_group_db_id: "{{ ec2_group_db_facts.security_groups | map(attribute='group_id') | first }}"

  - name: create subnet group
    rds_subnet_group:
      aws_access_key: "{{ aws_access_key  | default(omit) }}"
      aws_secret_key: "{{ aws_secret_key  | default(omit) }}"
      region: "{{ aws_vpc_nets | map(attribute='region') | first | default(aws_region) }}"
      state: present
      name: "{{ aws_rds_subnet_group }}"
      description: "RDS Subnet Group for {{ app_name }}"
      subnets: "{{ rds_group_subnet_ids }}"

  - name: create rds
    with_items: "{{ aws_rds_dbs }}"
    rds:
      aws_access_key: "{{ aws_access_key  | default(omit) }}"
      aws_secret_key: "{{ aws_secret_key  | default(omit) }}"
      region: "{{ aws_region | default(omit) }}"
      command: "{{ item.command | default(omit) }}"
      instance_name: "{{ item.instance_name }}"
      db_engine: "{{ item.db_engine | default(omit) }}"
      size: "{{ item.size | default(omit) }}"
      instance_type: "{{ item.instance_type | default(omit) }}"
      username: "{{ item.username | default(omit) }}"
      password: "{{ item.password | default(omit) }}"
      tags: "{{ item.tags | default(omit) }}"
      multi_zone: "{{ item.multi_zone | default(omit) }}"
      wait: "{{ item.wait | default(omit) }}"
      wait_timeout: "{{ item.wait_timeout | default(omit) }}"
      vpc_security_groups: "{{ ec2_group_db_id if ec2_group_db_id is defined and item.command != 'replicate' else ( item.vpc_security_groups | default(omit)) }}"
      source_instance: "{{ item.source_instance | default(omit) }}"
      subnet: "{{ aws_rds_subnet_group if item.command != 'replicate' else omit }}"
